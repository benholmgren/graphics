#ifndef _CSCI441_SHAPE_H_
#define _CSCI441_SHAPE_H_

#include <cstdlib>
#include <vector>

template <typename T, typename N, typename C>
void add_vertex(T& coords, const N& x, const N& y, const N& z,
        const C& r, const C& g, const C& b,
        const Vector4& n=Vector4(1,0,0), bool with_noise=false) {
    // adding color noise makes it easier to see before shading is implemented
    float noise = 1-with_noise*(rand()%150)/100.;
    coords.push_back(x);
    coords.push_back(y);
    coords.push_back(z);
    coords.push_back(r*noise);
    coords.push_back(g*noise);
    coords.push_back(b*noise);

    Vector4 normal = n.normalized();
    coords.push_back(normal.x());
    coords.push_back(normal.y());
    coords.push_back(normal.z());
}



			
	
class MazeFloor {
    public:
    std::vector<float> coords;
    MazeFloor() : coords{
        -1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
         1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
         1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
         1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
        -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
        -1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
        
        //far bar
        //front
        -1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
         1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
         1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
         1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        //back
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        //right
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        //left
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        //bottom
        -1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -1.0f, -1.0f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        //top
        -1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -1.0f, -0.9f, 0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        
        //near bar
        //back
        -0.8f, -1.0f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.8f, -1.0f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.8f, -0.9f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.8f, -0.9f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.8f, -0.9f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.8f, -1.0f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        //front
        -0.8f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
         0.8f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
         0.8f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
         0.8f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.8f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.8f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        //right
        -0.8f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.8f, -0.9f, -0.95f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.8f, -1.0f, -0.95f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.8f, -1.0f, -0.95f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.8f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.8f, -0.9f, -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        //left
         0.8f, -0.9f, -1.0f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         0.8f, -0.9f, -0.95f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         0.8f, -1.0f, -0.95f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         0.8f, -1.0f, -0.95f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         0.8f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
         0.8f, -0.9f, -1.0f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        //bottom
        -0.8f, -1.0f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.8f, -1.0f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.8f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.8f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.8f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.8f, -1.0f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        //top
        -0.8f, -0.9f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.8f, -0.9f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.8f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.8f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.8f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.8f, -0.9f, -0.95f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //left bar
        //right
        0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.95f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.95f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        //left
        1.0f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        1.0f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        1.0f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        //front
        1.0f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.95f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        1.0f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        1.0f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        //back
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.95f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.95f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        //bottom
         0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         1.0f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        //top
         0.95f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         1.0f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //right side
        //left
        -0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.95f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.95f, -0.9f, -1.0f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.95f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        //right
        -1.0f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -0.9f,  -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -1.0f, -1.0f,  -1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        //front
        -1.0f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.95f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.95f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -1.0f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -1.0f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        //back
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.95f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.95f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.95f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -1.0f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        //bottom
        -0.95f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.95f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -1.0f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -1.0f, -1.0f,  -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.95f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        //top
        -0.95f, -0.9f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.95f, -0.9f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -1.0f, -0.9f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -1.0f, -0.9f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -1.0f, -0.9f, -1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.95f, -0.9f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //interior bars from left to right
        //bar 1
        //right
        0.80f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.80f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.80f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.80f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.80f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.80f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        //left
        0.85f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.85f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.85f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.85f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.85f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.85f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        0.85f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.80f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.80f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.80f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.85f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.85f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

         0.85f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.80f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.80f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.80f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.85f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.85f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

         0.80f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.80f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.85f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.85f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.85f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.80f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

         0.80f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.80f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.85f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.85f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.85f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.80f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 2
        //right
        0.65f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.65f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.65f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.65f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.65f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.65f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        //left
        0.70f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.70f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.70f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.70f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.70f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.70f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        0.70f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.65f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.65f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.65f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.70f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.70f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

         0.70f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.65f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.65f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.65f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.70f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.70f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

         0.65f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.65f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.70f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.70f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.70f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.65f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

         0.65f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.65f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.70f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.70f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.70f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.65f, -0.9f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 3
        //right
        0.50f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.50f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.50f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.50f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.50f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.50f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        0.55f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.55f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.55f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.55f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.55f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.55f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        0.55f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.50f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.50f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.50f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.55f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.55f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

         0.55f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.50f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.50f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.50f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.55f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.55f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

         0.50f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.50f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.55f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.55f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.55f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.50f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

         0.50f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.50f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.55f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.55f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.55f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.50f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 4
        //right
        0.35f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.35f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.35f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.35f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.35f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.35f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        0.40f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.40f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.40f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.40f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.40f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.40f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        0.40f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.35f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.35f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.35f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.40f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.40f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

         0.40f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.35f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.35f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.35f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.40f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.40f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

         0.35f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.35f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.40f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.40f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.40f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.35f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

         0.35f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.35f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.40f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.40f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.40f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.35f, -0.9f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 5
        //right
        0.20f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.20f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.20f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.20f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.20f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.20f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        0.25f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.25f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.25f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.25f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.25f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.25f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        0.25f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.20f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.20f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.20f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.25f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.25f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

         0.25f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.20f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.20f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.20f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.25f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.25f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

         0.20f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.20f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.25f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.25f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.25f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.20f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

         0.20f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.20f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.25f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.25f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.25f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.20f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 6
        0.05f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.05f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.05f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.05f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.05f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        0.05f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        0.10f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.10f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.10f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.10f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.10f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        0.10f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        0.10f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.05f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.05f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.05f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.10f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        0.10f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

         0.10f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.05f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.05f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.05f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.10f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
         0.10f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

         0.05f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.05f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.10f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.10f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.10f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
         0.05f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

         0.05f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.05f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.10f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.10f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.10f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
         0.05f, -0.9f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 7
        -0.05f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.05f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.05f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.05f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.05f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.05f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        -0.10f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.10f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.10f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.10f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.10f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.10f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        -0.10f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.05f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.05f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.05f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.10f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.10f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

        -0.10f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.05f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.05f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.05f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.10f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.10f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

        -0.05f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.05f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.10f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.10f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.10f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.05f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

        -0.05f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.05f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.10f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.10f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.10f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.05f, -0.9f, 0.8f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 8
        -0.20f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.20f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.20f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.20f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.20f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.20f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        -0.25f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.25f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.25f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.25f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.25f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.25f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        -0.25f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.20f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.20f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.20f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.25f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.25f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

        -0.25f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.20f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.20f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.20f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.25f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.25f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

        -0.20f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.20f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.25f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.25f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.25f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.20f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

        -0.20f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.20f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.25f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.25f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.25f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.20f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 9
        -0.35f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.35f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.35f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.35f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.35f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.35f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        -0.40f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.40f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.40f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.40f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.40f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.40f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        -0.40f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.35f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.35f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.35f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.40f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.40f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

        -0.40f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.35f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.35f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.35f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.40f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.40f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

        -0.35f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.35f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.40f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.40f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.40f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.35f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

        -0.35f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.35f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.40f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.40f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.40f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.35f, -0.9f, 0.8f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 10
        -0.50f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.50f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.50f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.50f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.50f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.50f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        -0.55f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.55f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.55f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.55f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.55f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.55f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        -0.55f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.50f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.50f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.50f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.55f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.55f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

        -0.55f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.50f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.50f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.50f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.55f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.55f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

        -0.50f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.50f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.55f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.55f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.55f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.50f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

        -0.50f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.50f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.55f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.55f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.55f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.50f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 11
        -0.65f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.65f, -1.0f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.65f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.65f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.65f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.65f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        -0.70f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.70f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.70f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.70f, -0.9f,  0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.70f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.70f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        -0.70f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.65f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.65f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.65f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.70f, -1.0f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.70f, -0.9f,  -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

        -0.65f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.65f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.70f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.70f, -1.0f,  0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.70f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.65f, -1.0f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

        -0.65f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.65f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.70f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.70f, -0.9f, 0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.70f, -0.9f, -1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.65f, -0.9f, 0.8f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        
        //bar 12
        -0.80f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.80f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.80f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.80f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.80f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,
        -0.80f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, -1.0f, 0.0f, 0.0f,

        -0.85f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.85f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.85f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.85f, -0.9f,  1.0f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.85f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
        -0.85f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,

        -0.85f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.80f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.80f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.80f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.85f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
        -0.85f, -0.9f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,

        -0.85f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.80f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.80f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.80f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.85f, -1.0f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,
        -0.85f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f,

        -0.80f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.80f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.85f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.85f, -1.0f,  1.0f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.85f, -1.0f,  -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,
        -0.80f, -1.0f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, -1.0f, 0.0,

        -0.80f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.80f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.85f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.85f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.85f, -0.9f, -0.8f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0,
        -0.80f, -0.9f, 1.0f,  1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0

    } {}
};

class DiscoCube {
public:
    std::vector<float> coords;
    DiscoCube() : coords{
        -0.03f, -1.0f, -0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f, -1.0,
         0.03f, -1.0f, -0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f, -1.0,
         0.03f, -0.94f, -0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f, -1.0,
         0.03f, -0.94f, -0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f, -1.0,
        -0.03f, -0.94f, -0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f, -1.0,
        -0.03f, -1.0f, -0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f, -1.0,

        -0.03f, -1.0f,  0.03f,  0.0f, 0.0f, 1.0f,  0.0f,  0.0f,  1.0,
         0.03f, -1.0f,  0.03f,  0.0f, 0.0f, 1.0f,  0.0f,  0.0f,  1.0,
         0.03f, -0.94f,  0.03f,  0.0f, 0.0f, 1.0f,  0.0f,  0.0f,  1.0,
         0.03f, -0.94f,  0.03f,  0.0f, 0.0f, 1.0f,  0.0f,  0.0f,  1.0,
        -0.03f, -0.94f,  0.03f,  0.0f, 0.0f, 1.0f,  0.0f,  0.0f,  1.0,
        -0.03f, -1.0f,  0.03f,  0.0f, 0.0f, 1.0f,  0.0f,  0.0f,  1.0,

        -0.03f, -0.94f,  0.03f,  1.0f, 1.0f, 0.0f, -1.0f,  0.0f,  0.0,
        -0.03f, -0.94f, -0.03f,  1.0f, 1.0f, 0.0f, -1.0f,  0.0f,  0.0,
        -0.03f, -1.0f, -0.03f,  1.0f, 1.0f, 0.0f, -1.0f,  0.0f,  0.0,
        -0.03f, -1.0f, -0.03f,  1.0f, 1.0f, 0.0f, -1.0f,  0.0f,  0.0,
        -0.03f, -1.0f,  0.03f,  1.0f, 1.0f, 0.0f, -1.0f,  0.0f,  0.0,
        -0.03f, -0.94f,  0.03f,  1.0f, 1.0f, 0.0f, -1.0f,  0.0f,  0.0,

         0.03f, -0.94f,  0.03f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,  0.0,
         0.03f, -0.94f, -0.03f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,  0.0,
         0.03f, -1.0f, -0.03f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,  0.0,
         0.03f, -1.0f, -0.03f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,  0.0,
         0.03f, -1.0f,  0.03f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,  0.0,
         0.03f, -0.94f,  0.03f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,  0.0,

        -0.03f, -1.0f, -0.03f,  0.0f, 1.0f, 0.0f,  0.0f, -1.0f,  0.0,
         0.03f, -1.0f, -0.03f,  0.0f, 1.0f, 0.0f,  0.0f, -1.0f,  0.0,
         0.03f, -1.0f,  0.03f,  0.0f, 1.0f, 0.0f,  0.0f, -1.0f,  0.0,
         0.03f, -1.0f,  0.03f,  0.0f, 1.0f, 0.0f,  0.0f, -1.0f,  0.0,
        -0.03f, -1.0f,  0.03f,  0.0f, 1.0f, 0.0f,  0.0f, -1.0f,  0.0,
        -0.03f, -1.0f, -0.03f,  0.0f, 1.0f, 0.0f,  0.0f, -1.0f,  0.0,

        -0.03f, -0.94f, -0.03f,  1.0f, 1.0f, 0.0f,  0.0f,  1.0f,  0.0,
         0.03f, -0.94f, -0.03f,  0.0f, 1.0f, 0.0f,  0.0f,  1.0f,  0.0,
         0.03f, -0.94f,  0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  1.0f,  0.0,
         0.03f, -0.94f,  0.03f,  0.0f, 1.0f, 1.0f,  0.0f,  1.0f,  0.0,
        -0.03f, -0.94f,  0.03f,  0.0f, 1.0f, 0.0f,  0.0f,  1.0f,  0.0,
        -0.03f, -0.94f, -0.03f,  1.0f, 1.0f, 0.0f,  0.0f,  1.0f,  0.0
    } {}

};

class Cylinder {
public:
    std::vector<float> coords;
    Cylinder(unsigned int n, float r, float g, float b) {
        double step_size = 2*M_PI / n;
        double c_x=0;
        double c_y=0;
        double h = .5;
        float radius = .5;

        for (int i = 0; i < n; ++i) {
            // vertex i
            double theta_i = i*step_size;
            double vi_x = radius*cos(theta_i);
            double vi_y = radius*sin(theta_i);

            // vertex i+1
            double theta_ip1 = ((i+1)%n)*step_size;
            double vip1_x = radius*cos(theta_ip1);
            double vip1_y = radius*sin(theta_ip1);

            add_vertex(coords, vi_x, -h, vi_y, r, g, b);
            add_vertex(coords, vi_x, h, vi_y, r, g, b);
            add_vertex(coords, vip1_x, -h, vip1_y, r, g, b);

            // add triangle vip1L, viH, vip1H
            add_vertex(coords, vip1_x, -h, vip1_y, r, g, b);
            add_vertex(coords, vi_x, h, vi_y, r, g, b);
            add_vertex(coords, vip1_x, h, vip1_y, r, g, b);

            // add high triangle vi, vip1, 0
            Vector4 nh(0, 1, 0);
            add_vertex(coords, vip1_x, h, vip1_y, r, g, b);
            add_vertex(coords, vi_x, h, vi_y, r, g, b);
            add_vertex(coords, c_x, h, c_y, r, g, b);

            // // add low triangle vi, vip1, 0
            Vector4 nl(0, -1, 0);
            add_vertex(coords, vip1_x, -h, vip1_y, r, g, b);
            add_vertex(coords, c_x, -h, c_y, r, g, b);
            add_vertex(coords, vi_x, -h, vi_y, r, g, b);
        }
    }
};


class Cone {
public:
    std::vector<float> coords;
    Cone(unsigned int n, float r, float g, float b) {

        double step_size = 2*M_PI / n;
        double c_x=0;
        double c_y=0;
        double h = .5;
        float radius = .5;

        for (int i = 0; i < n; ++i) {
            // vertex i
            double theta_i = i*step_size;
            double vi_x = radius*cos(theta_i);
            double vi_y = radius*sin(theta_i);

            // vertex i+1
            double theta_ip1 = ((i+1)%n)*step_size;
            double vip1_x = radius*cos(theta_ip1);
            double vip1_y = radius*sin(theta_ip1);

            // add triangle viL, viH, vip1L
            add_vertex(coords, vi_x, -h, vi_y, r, g, b);
            add_vertex(coords, c_x, h, c_y, r, g, b);
            add_vertex(coords, vip1_x, -h, vip1_y, r, g, b);

            // // add low triangle vi, vip1, 0
            add_vertex(coords, vip1_x, -h, vip1_y, r, g, b);
            add_vertex(coords, c_x, -h, c_y, r, g, b);
            add_vertex(coords, vi_x, -h, vi_y, r, g, b);
        }
    }
};

class Sphere {
    double x(float r, float phi, float theta){
        return r*cos(theta)*sin(phi);
    }

    double y(float r, float phi, float theta){
        return r*sin(theta)*sin(phi);
    }

    double z(float r, float phi, float theta){
        return r*cos(phi);
    }

public:
    std::vector<float> coords;
    Sphere(unsigned int n, float radius, float r, float g, float b) {
        int n_steps = (n%2==0) ? n : n+1;
        double step_size = 2*M_PI / n_steps;

        for (int i = 0; i < n_steps/2.0; ++i) {
            for (int j = 0; j < n_steps; ++j) {
                double phi_i = i*step_size;
                double phi_ip1 = ((i+1)%n_steps)*step_size;
                double theta_j = j*step_size;
                double theta_jp1 = ((j+1)%n_steps)*step_size;

                // vertex i,j
                double vij_x = x(radius, phi_i, theta_j);
                double vij_y = y(radius, phi_i, theta_j);
                double vij_z = z(radius, phi_i, theta_j);

                // vertex i+1,j
                double vip1j_x = x(radius, phi_ip1, theta_j);
                double vip1j_y = y(radius, phi_ip1, theta_j);
                double vip1j_z = z(radius, phi_ip1, theta_j);

                // vertex i,j+1
                double vijp1_x = x(radius, phi_i, theta_jp1);
                double vijp1_y = y(radius, phi_i, theta_jp1);
                double vijp1_z = z(radius, phi_i, theta_jp1);

                // vertex i+1,j+1
                double vip1jp1_x = x(radius, phi_ip1, theta_jp1);
                double vip1jp1_y = y(radius, phi_ip1, theta_jp1);
                double vip1jp1_z = z(radius, phi_ip1, theta_jp1);

                // add triangle
                add_vertex(coords, vij_x, vij_y, vij_z, r, g, b);
                add_vertex(coords, vip1j_x, vip1j_y, vip1j_z, r, g, b);
                add_vertex(coords, vijp1_x, vijp1_y, vijp1_z, r, g, b);

                // add triange
                add_vertex(coords, vijp1_x, vijp1_y, vijp1_z, r, g, b);
                add_vertex(coords, vip1jp1_x, vip1jp1_y, vip1jp1_z, r, g, b);
                add_vertex(coords, vip1j_x, vip1j_y, vip1j_z, r, g, b);
            }
        }
    }
};

class Wall {
	public:
	std::vector<float> coords;
	Wall(float x, float y, float z, float size ) {
	//origin SW
	float vertex1[6] = {x, y, z, .5, .5, 1};
	//Bottom SE 1,0,0
	float vertex2[6] = {x+size, y, z, .2, .2, .5};
	//bottom NE 
	float vertex3[6] = {x+size, y, z+size, .3, .3, .7};
	//bottom NW
	float vertex4[6] = {x, y, z+size, .4, .4, .8};
	//Top SW
	float vertex5[6] = {x, y+size, z, .5, .5, 1};
	//Top SE 1,0,0
	float vertex6[6] = {x+size, y+size, z, .2, .2, .5};
	//Top NE 
	float vertex7[6] = {x+size, y+size, z+size, .3, .3, .7};
	//Top NW
	float vertex8[6] = {x, y+size, z+size, .4, .4, .8};
	//Front face:

	//Front face
	float normal1[3] = {0, 0, -1};
	makeface(coords,vertex1, vertex2, vertex6, vertex5, normal1);
	//top face
	float normal2[3] = {0, 1, 0};
	makeface(coords,vertex5, vertex6, vertex7, vertex8, normal2);
	//bot face
	float normal3[3] = {0, -1, 0};
	makeface(coords,vertex1, vertex4, vertex3, vertex2, normal3);
	//right face
	float normal4[3] = {1, 0, 0};
	makeface(coords,vertex2, vertex3, vertex7, vertex6, normal4);
	//left face
	float normal5[3] = {-1, 0, 0};
	makeface(coords,vertex1, vertex4, vertex8, vertex5, normal5);
	//back face
	float normal6[3] = {0, 0, 1};
	makeface(coords,vertex4, vertex8, vertex7, vertex3, normal6);
	}
	void addvert(std::vector<float> coords,float vert[6]){
		for(int i = 0; i < 6; i++){
			coords.push_back(vert[i]);
		}
	}
	void makeface(std::vector<float> coords,
	float vert1[6], float vert2[6], float vert3[6], float vert4[6], float norm[3]){

		addvert(coords,vert1);
		coords.push_back(norm[0]);
		coords.push_back(norm[1]);
		coords.push_back(norm[2]);

		addvert(coords,vert2);
		coords.push_back(norm[0]);
		coords.push_back(norm[1]);
		coords.push_back(norm[2]);

		addvert(coords,vert3);
		coords.push_back(norm[0]);
		coords.push_back(norm[1]);
		coords.push_back(norm[2]);

		addvert(coords,vert3);
		coords.push_back(norm[0]);
		coords.push_back(norm[1]);
		coords.push_back(norm[2]);

		addvert(coords,vert4);
		coords.push_back(norm[0]);
		coords.push_back(norm[1]);
		coords.push_back(norm[2]);

		addvert(coords,vert1);
		coords.push_back(norm[0]);
		coords.push_back(norm[1]);
		coords.push_back(norm[2]);
		
	}
};

template <typename T>
std::vector<float> cube_texture(T& coords) {
	std::vector<float> newcoords;
	
	for(int i = 0; i < coords.size()/9; i++){
		//Vertex data
		newcoords.push_back(coords[9*i]);
		newcoords.push_back(coords[(9*i)+1]);
		newcoords.push_back(coords[(9*i)+2]);
		newcoords.push_back(coords[(9*i)+3]);
		newcoords.push_back(coords[(9*i)+4]);
		newcoords.push_back(coords[(9*i)+5]);
		newcoords.push_back(coords[(9*i)+6]);
		newcoords.push_back(coords[(9*i)+7]);
		newcoords.push_back(coords[(9*i)+8]);
		//UV Coords data
		int n = i%6;
		
		switch (n)
		{
			case 0:
				newcoords.push_back(0);
				newcoords.push_back(0);
				break;
			case 1:
				newcoords.push_back(1);
				newcoords.push_back(0);
				break;

			case 2:
				newcoords.push_back(1);
				newcoords.push_back(1);
				break;
			case 3:
				newcoords.push_back(1);
				newcoords.push_back(1);
				break;
			case 4:
				newcoords.push_back(0);
				newcoords.push_back(1);
				break;
			case 5:
				newcoords.push_back(0);
				newcoords.push_back(0);			
				break;
			default:
				std::cout << "POOP" << std::endl;
				break;
		}
	}
	return newcoords;
}

class Maze {
public:
	std::vector<float> coords;
	float size = 1;
	Maze() {
		for(int i = 0; i < 25; i++){
			Wall block(0, 0, 0, 1);
			for(int j = 0; j<block.coords.size();j++){
				coords.push_back(block.coords[0]);
			}
		}
	}
	
	
};

class Torus {
    double x(float c, float a, float phi, float theta) {
        return (c+a*cos(theta))*cos(phi);
    }

    double y(float c, float a, float phi, float theta) {
        return (c+a*cos(theta))*sin(phi);
    }

    double z(float c, float a, float phi, float theta) {
        return a*sin(theta);
    }

public:
    std::vector<float> coords;
    Torus(unsigned int n, float c, float a, float r, float g, float b) {

        double step_size = 2*M_PI / n;
        double c_x=0;
        double c_y=0;
        double h = .5;
        float radius = .5;

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                double phi_i = i*step_size;
                double phi_ip1 = ((i+1)%n)*step_size;
                double theta_j = j*step_size;
                double theta_jp1 = ((j+1)%n)*step_size;

                // vertex i,j
                double vij_x = x(c, a, phi_i, theta_j);
                double vij_y = y(c, a, phi_i, theta_j);
                double vij_z = z(c, a, phi_i, theta_j);

                // vertex i+1,j
                double vip1j_x = x(c, a, phi_ip1, theta_j);
                double vip1j_y = y(c, a, phi_ip1, theta_j);
                double vip1j_z = z(c, a, phi_ip1, theta_j);

                // vertex i,j+1
                double vijp1_x = x(c, a, phi_i, theta_jp1);
                double vijp1_y = y(c, a, phi_i, theta_jp1);
                double vijp1_z = z(c, a, phi_i, theta_jp1);

                // vertex i+1,j+1
                double vip1jp1_x = x(c, a, phi_ip1, theta_jp1);
                double vip1jp1_y = y(c, a, phi_ip1, theta_jp1);
                double vip1jp1_z = z(c, a, phi_ip1, theta_jp1);

                // add triangle
                add_vertex(coords, vij_x, vij_y, vij_z, r, g, b);
                add_vertex(coords, vip1j_x, vip1j_y, vip1j_z, r, g, b);
                add_vertex(coords, vijp1_x, vijp1_y, vijp1_z, r, g, b);

                // add triange
                add_vertex(coords, vijp1_x, vijp1_y, vijp1_z, r, g, b);
                add_vertex(coords, vip1jp1_x, vip1jp1_y, vip1jp1_z, r, g, b);
                add_vertex(coords, vip1j_x, vip1j_y, vip1j_z, r, g, b);
            }
        }
    }

};

#endif
